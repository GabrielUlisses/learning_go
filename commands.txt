When your code imports packages contained in other modules, you manage those dependencies through your code's own module. That module is defined by a go.mod file that tracks the modules that provide those packages. That go.mod file stays with your code, including in your source code repository.

To enable dependency tracking for your code by creating a go.mod file, run the go mod init command, giving it the name of the module your code will be in. The name is the module's module path.

go mod init example/hello

go run .

// Go will add the quote module as a requirement, as well as a go.sum file for use in authenticating the module
go mod tidy

// Get a package
go get <package>

//editing module reference to redirect go tools 
$ go mod edit -replace example.com/greetings=../greetings

// run package tests files 
go test
// run package tests files in verbose mode
go test -v

//* 
    Compile and install the application 
    https://go.dev/doc/tutorial/compile-install
*//

// The go build command compiles the packages, along with their dependencies, but it doesn't install the results.
go build

// The go install command compiles and installs the packages.
./<package> or <package>.exe

// Discover the Go install path, where the go command will install the current package
go list -f '{{.Target}}'

// Add the Go install directory to your system's shell path.
// That way, you'll be able to run your program's executable without specifying where the executable is.
$ export PATH=$PATH:/path/to/your/install/directory
or 
$ set PATH=%PATH%;C:\path\to\your\install\directory

As an alternative, if you already have a directory like $HOME/bin in your shell path and you'd like to install your Go programs there, you can change the install target by setting the GOBIN variable using the go env command:
$ go env -w GOBIN=/path/to/your/bin

// Once you've updated the shell path, run the go install command to compile and install the package.
go install